//package com.example.final_project.views.activity;
//
//import android.os.Bundle;
//import android.util.Log;
//import android.view.inputmethod.EditorInfo;
//import android.widget.EditText;
//import android.widget.ImageButton;
//
//import androidx.appcompat.app.AppCompatActivity;
//import androidx.recyclerview.widget.LinearLayoutManager;
//import androidx.recyclerview.widget.RecyclerView;
//
//import com.example.final_project.BuildConfig;
//import com.example.final_project.R;
//import com.example.final_project.helper.GeminiApi;
//import com.example.final_project.models.entity.ChatMessage;
//import com.example.final_project.models.entity.FoodItem;
//import com.example.final_project.viewmodels.FoodItemViewModel;
//import com.example.final_project.views.adapter.ChatAdapter;
//
//import java.util.ArrayList;
//import java.util.List;
//
//public class ChatActivity extends AppCompatActivity {
//
//    private RecyclerView recyclerViewChat;
//    private EditText etMessage;
//    private ImageButton btnSend;
//    private List<ChatMessage> chatMessages;
//    private ChatAdapter chatAdapter;
//
//    @Override
//    protected void onCreate(Bundle savedInstanceState) {
//        super.onCreate(savedInstanceState);
//        setContentView(R.layout.activity_chat);
//
//        recyclerViewChat = findViewById(R.id.recyclerViewChat);
//        etMessage = findViewById(R.id.etMessage);
//        btnSend = findViewById(R.id.btnSend);
//
//        chatMessages = new ArrayList<>();
//        chatAdapter = new ChatAdapter(chatMessages);
//        recyclerViewChat.setLayoutManager(new LinearLayoutManager(this));
//        recyclerViewChat.setAdapter(chatAdapter);
//        btnSend.setOnClickListener(v -> sendMessage());
//
//        greetUser();
//    }
//
//    private void sendMessage() {
//        String message = etMessage.getText().toString().trim();
//        if (message.isEmpty()) return;
//
//        chatMessages.add(new ChatMessage(message, true));
//        chatAdapter.notifyItemInserted(chatMessages.size() - 1);
//        recyclerViewChat.scrollToPosition(chatMessages.size() - 1);
//        etMessage.setText("");
//
//        ChatMessage thinkingMessage = new ChatMessage("ƒêang suy nghƒ©...", false);
//        chatMessages.add(thinkingMessage);
//        int thinkingIndex = chatMessages.size() - 1;
//        chatAdapter.notifyItemInserted(thinkingIndex);
//        recyclerViewChat.scrollToPosition(thinkingIndex);
//        String m = message.toLowerCase().trim();
//        if (m.contains("t·ªß l·∫°nh") || m.contains("tu lanh") || m.contains("my fridge")) {
//            new Thread(() -> {
//                try {
//                    FoodItemViewModel viewModel = new FoodItemViewModel();
//                    String userId = "2"; // sau n√†y l·∫•y t·ª´ session ƒëƒÉng nh·∫≠p
//                    List<FoodItem> foodItems = viewModel.getFoodItemsByUserId(userId);
//
//                    if (foodItems == null || foodItems.isEmpty()) {
//                        runOnUiThread(() -> {
//                            chatMessages.remove(thinkingIndex);
//                            chatAdapter.notifyItemRemoved(thinkingIndex);
//
//                            chatMessages.add(new ChatMessage(
//                                    "M√¨nh ch∆∞a th·∫•y nguy√™n li·ªáu n√†o trong t·ªß l·∫°nh c·ªßa b·∫°n. " +
//                                            "B·∫°n h√£y th√™m nguy√™n li·ªáu v√†o kho tr∆∞·ªõc (V√≠ d·ª•: tr·ª©ng 6, c√† chua 3, m√¨ g√≥i 2), r·ªìi nh·∫Øn l·∫°i **my fridge** nh√©.",
//                                    false));
//                            chatAdapter.notifyItemInserted(chatMessages.size() - 1);
//                            recyclerViewChat.scrollToPosition(chatMessages.size() - 1);
//                        });
//                        return;
//                    }
//
//                    StringBuilder ingredients = new StringBuilder();
//                    for (FoodItem item : foodItems) {
//                        if (item.getQuantity() > 0 && item.getFoodName() != null && !item.getFoodName().isEmpty()) {
//                            ingredients.append(item.getFoodName())
//                                    .append(" (").append(item.getQuantity()).append("), ");
//                        }
//                    }
//                    String ing = ingredients.toString().replaceAll(",\\s*$", "");
//
//                    if (ing.isEmpty()) { /* x·ª≠ l√Ω nh∆∞ b∆∞·ªõc (2) */ return; }
//
////                    String aiPrompt =
////                            "B·∫°n l√† ƒë·∫ßu b·∫øp. D·ª±a tr√™n c√°c nguy√™n li·ªáu trong t·ªß l·∫°nh: " + ing + ". " +
////                                    "H√£y g·ª£i √Ω ƒë√∫ng 3 m√≥n ƒÉn. V·ªõi m·ªói m√≥n, li·ªát k√™: 1) T√™n m√≥n, 2) Nguy√™n li·ªáu c·∫ßn th√™m (n·∫øu thi·∫øu), " +
////                                    "3) C√¥ng th·ª©c t√≥m t·∫Øt 4-6 b∆∞·ªõc, 4) Th·ªùi gian n·∫•u ∆∞·ªõc t√≠nh.";
//                    String aiPrompt =
//                            "B·∫°n l√† m·ªôt ƒë·∫ßu b·∫øp chuy√™n nghi·ªáp. D·ª±a v√†o nguy√™n li·ªáu sau: " + ing + ". " +
//                                    "H√£y g·ª£i √Ω ch√≠nh x√°c 3 m√≥n ƒÉn. " +
//                                    "QUAN TR·ªåNG: V·ªõi m·ªói m√≥n, h√£y tr·∫£ l·ªùi theo ƒê√öNG ƒë·ªãnh d·∫°ng sau, KH√îNG th√™m b·∫•t k·ª≥ gi·∫£i th√≠ch n√†o kh√°c:\n" +
//                                    "## [S·ªë th·ª© t·ª±]. [T√™n m√≥n ƒÉn]\n" +
//                                    "@@nguyenlieu [Li·ªát k√™ nguy√™n li·ªáu c·∫ßn th√™m]\n" +
//                                    "@@congthuc [Li·ªát k√™ c√°c b∆∞·ªõc c√¥ng th·ª©c]\n" +
//                                    "@@thoigian [Ghi th·ªùi gian n·∫•u]\n" +
//                                    "---";
//
//                    new GeminiApi().sendMessage(aiPrompt, new GeminiApi.Callback() {
//                        @Override
//                        public void onSuccess(String reply) {
//                            runOnUiThread(() -> {
//                                chatMessages.remove(thinkingIndex);
//                                chatAdapter.notifyItemRemoved(thinkingIndex);
//
//                                chatMessages.add(new ChatMessage(reply, false));
//                                chatAdapter.notifyItemInserted(chatMessages.size() - 1);
//                                recyclerViewChat.scrollToPosition(chatMessages.size() - 1);
//                            });
//                        }
//
//
//                        @Override
//                        public void onError(Exception e) {
//                            runOnUiThread(() -> {
//                                chatMessages.remove(thinkingIndex);
//                                chatAdapter.notifyItemRemoved(thinkingIndex);
//                                chatMessages.add(new ChatMessage("L·ªói Gemini: " + e.getMessage(), false));
//                                chatAdapter.notifyItemInserted(chatMessages.size() - 1);
//                            });
//                        }
//                    });
//
//                } catch (Exception e) {
//                    runOnUiThread(() -> {
//                        chatMessages.remove(thinkingIndex);
//                        chatAdapter.notifyItemRemoved(thinkingIndex);
//                        chatMessages.add(new ChatMessage("L·ªói l·∫•y d·ªØ li·ªáu: " + e.getMessage(), false));
//                        chatAdapter.notifyItemInserted(chatMessages.size() - 1);
//                    });
//                }
//            }).start();
//        } else {
//            // X·ª≠ l√Ω prompt th∆∞·ªùng
//            new GeminiApi().sendMessage(message, new GeminiApi.Callback() {
//                @Override
//                public void onSuccess(String reply) {
//                    chatMessages.remove(thinkingIndex);
//                    chatAdapter.notifyItemRemoved(thinkingIndex);
//
//                    chatMessages.add(new ChatMessage(reply, false));
//                    chatAdapter.notifyItemInserted(chatMessages.size() - 1);
//                    recyclerViewChat.scrollToPosition(chatMessages.size() - 1);
//                }
//
//                @Override
//                public void onError(Exception e) {
//                    chatMessages.remove(thinkingIndex);
//                    chatAdapter.notifyItemRemoved(thinkingIndex);
//                    chatMessages.add(new ChatMessage("C√≥ l·ªói x·∫£y ra: " + e.getMessage(), false));
//                    chatAdapter.notifyItemInserted(chatMessages.size() - 1);
//                }
//            });
//        }
//    }
//
//    private void greetUser() {
//        String[] greetings = {
//                "Xin ch√†o! M√¨nh l√† MealTime üçΩÔ∏è ‚Äì tr·ª£ l√Ω g·ª£i √Ω m√≥n ƒÉn c·ªßa b·∫°n h√¥m nay!",
//                "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi MealTime ü§ñ! Mu·ªën m√¨nh g·ª£i √Ω b·ªØa ƒÉn ngon mi·ªáng ch·ª©?",
//                "Hey! ƒê√¢y l√† MealTime üòã ‚Äì c√πng kh√°m ph√° m√≥n ƒÉn th√∫ v·ªã n√†o!",
//                "Xin ch√†o, m√¨nh l√† MealTime AI. H√£y n√≥i m√¨nh bi·∫øt b·∫°n c√≥ g√¨ trong t·ªß l·∫°nh nh√©!"
//        };
//
//        String greeting = greetings[(int) (Math.random() * greetings.length)];
//        chatMessages.add(new ChatMessage(greeting, false));
//        chatAdapter.notifyItemInserted(chatMessages.size() - 1);
//        recyclerViewChat.scrollToPosition(chatMessages.size() - 1);
//    }
//
//}


package com.example.final_project.views.activity;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler; // Th√™m import
import android.os.Looper;  // Th√™m import
import android.widget.Button; // Th√™m import
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout; // Th√™m import
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.lifecycle.ViewModelProvider; // Th√™m import quan tr·ªçng n√†y
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.final_project.R;
import com.example.final_project.helper.GeminiApi;
import com.example.final_project.models.entity.ChatMessage;
import com.example.final_project.models.entity.FoodItem;
import com.example.final_project.models.entity.RecipeData; // Th√™m import cho RecipeData
import com.example.final_project.utils.UserSessionManager;
import com.example.final_project.viewmodels.FoodItemViewModel;
import com.example.final_project.viewmodels.RecipeViewModel; // Th√™m import cho RecipeViewModel
import com.example.final_project.views.adapter.ChatAdapter;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService; // Th√™m import
import java.util.concurrent.Executors;   // Th√™m import

public class ChatActivity extends AppCompatActivity implements ChatAdapter.OnRecipeSaveListener {

    private RecyclerView recyclerViewChat;
    private EditText etMessage;
    private ImageButton btnSend;
    private List<ChatMessage> chatMessages;
    private ChatAdapter chatAdapter;
    private RecipeViewModel recipeViewModel;

    // C√°c bi·∫øn cho n√∫t chat nhanh
    private LinearLayout llQuickReplies;
    private Button btnQuickFridge;
    private Button btnQuickHungry;

    // ExecutorService ƒë·ªÉ ch·∫°y t√°c v·ª• DB tr√™n lu·ªìng n·ªÅn
    private final ExecutorService databaseExecutor = Executors.newSingleThreadExecutor();
    private final Handler mainHandler = new Handler(Looper.getMainLooper());


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chat);

        ImageButton btnBack = findViewById(R.id.btnBack);
        btnBack.setOnClickListener(v -> {
            Intent intent = new Intent(ChatActivity.this, HomeMenuActivity.class);
            startActivity(intent);
        });

        // --- √Ånh x·∫° c√°c view ---
        recyclerViewChat = findViewById(R.id.recyclerViewChat);
        etMessage = findViewById(R.id.etMessage);
        btnSend = findViewById(R.id.btnSend);
        llQuickReplies = findViewById(R.id.llQuickReplies);
        btnQuickFridge = findViewById(R.id.btnQuickFridge);
        btnQuickHungry = findViewById(R.id.btnQuickHungry);
        // --------------------------

        chatMessages = new ArrayList<>();
        chatAdapter = new ChatAdapter(chatMessages, this);
        recyclerViewChat.setLayoutManager(new LinearLayoutManager(this));
        recyclerViewChat.setAdapter(chatAdapter);

        // Kh·ªüi t·∫°o RecipeViewModel ƒë√∫ng c√°ch
        recipeViewModel = new ViewModelProvider(this).get(RecipeViewModel.class);
        observeViewModel(); // Thi·∫øt l·∫≠p observer

        // --- Thi·∫øt l·∫≠p Listener cho c√°c n√∫t ---
        btnSend.setOnClickListener(v -> sendMessage(etMessage.getText().toString()));

        btnQuickFridge.setOnClickListener(v -> {
            addMessageToList("My fridge", true); // Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
            showFridgeContents(); // G·ªçi h√†m hi·ªÉn th·ªã n·ªôi dung t·ªß l·∫°nh
        });

        btnQuickHungry.setOnClickListener(v -> {
            addMessageToList("I'm hungry", true); // Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
            //sendMessage("my fridge"); // G·ª≠i "my fridge" ƒë·ªÉ k√≠ch ho·∫°t AI g·ª£i √Ω
            sendMessage("I'm hungry"); // G·ª≠i "my fridge" ƒë·ªÉ k√≠ch ho·∫°t AI g·ª£i √Ω
        });
        // ------------------------------------

        greetUser();
    }

    /**
     * L·∫•y danh s√°ch ƒë·ªì trong t·ªß t·ª´ ViewModel v√† hi·ªÉn th·ªã l√™n chat.
     */
    private void showFridgeContents() {
        // Hi·ªÉn th·ªã tin nh·∫Øn ch·ªù (t·ª´ bot)
        addMessageToList("ƒê·ªÉ m√¨nh xem trong t·ªß c√≥ g√¨ nh√©...", false);

        databaseExecutor.execute(() -> { // Ch·∫°y tr√™n lu·ªìng n·ªÅn
            try {
                FoodItemViewModel foodViewModel = new FoodItemViewModel();
                String currentUserId = UserSessionManager.getInstance(ChatActivity.this).getCurrentUserId();
                //String userId = "1"; // L·∫•y userId hi·ªán t·∫°i (c·∫ßn thay th·∫ø b·∫±ng logic l·∫•y userId th·ª±c t·∫ø)
                List<FoodItem> foodItems = foodViewModel.getFoodItemsByUserId(currentUserId);

                // Quay l·∫°i lu·ªìng ch√≠nh ƒë·ªÉ c·∫≠p nh·∫≠t UI
                mainHandler.post(() -> {
                    // X√≥a tin nh·∫Øn ch·ªù (t√¨m v√† x√≥a "ƒê·ªÉ m√¨nh xem...") - T√πy ch·ªçn
                    removeThinkingMessage(chatMessages.size() - 1); // X√≥a tin nh·∫Øn cu·ªëi c√πng n·∫øu l√† tin ch·ªù

                    if (foodItems == null || foodItems.isEmpty()) {
                        addMessageToList("T·ªß l·∫°nh c·ªßa b·∫°n ƒëang tr·ªëng.", false);
                    } else {
                        StringBuilder fridgeContent = new StringBuilder("Trong t·ªß l·∫°nh c·ªßa b·∫°n hi·ªán c√≥:\n");
                        for (FoodItem item : foodItems) {
                            if (item.getQuantity() > 0 && item.getFoodName() != null && !item.getFoodName().isEmpty()) {
                                fridgeContent.append("‚Ä¢ ").append(item.getFoodName()); // D√πng d·∫•u ‚Ä¢ cho ƒë·∫πp h∆°n
                                fridgeContent.append(" (").append(item.getQuantity()).append(")\n"); // Th√™m s·ªë l∆∞·ª£ng
                            }
                        }
                        addMessageToList(fridgeContent.toString().trim(), false);
                    }
                });

            } catch (Exception e) {
                // X·ª≠ l√Ω l·ªói n·∫øu c√≥
                mainHandler.post(() -> {
                    removeThinkingMessage(chatMessages.size() - 1); // X√≥a tin nh·∫Øn ch·ªù
                    addMessageToList("Xin l·ªói, m√¨nh kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c t·ªß l·∫°nh l√∫c n√†y: " + e.getMessage(), false);
                });
                e.printStackTrace();
            }
        });
    }

    /**
     * Th√™m tin nh·∫Øn v√†o danh s√°ch v√† c·∫≠p nh·∫≠t RecyclerView.
     */
    private void addMessageToList(String message, boolean isUser) {
        chatMessages.add(new ChatMessage(message, isUser));
        chatAdapter.notifyItemInserted(chatMessages.size() - 1);
        // Cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t m·ªôt c√°ch m∆∞·ª£t m√† h∆°n
        recyclerViewChat.smoothScrollToPosition(chatMessages.size() - 1);
    }

    /**
     * G·ª≠i tin nh·∫Øn ƒë·∫øn AI ho·∫∑c x·ª≠ l√Ω logic ƒë·∫∑c bi·ªát ("my fridge").
     * @param messageText N·ªôi dung tin nh·∫Øn c·∫ßn g·ª≠i.
     */
    private void sendMessage(String messageText) {
        final String message = messageText.trim();
        if (message.isEmpty()) return;

        // Ch·ªâ th√™m tin nh·∫Øn ng∆∞·ªùi d√πng n·∫øu n√≥ ch∆∞a ƒë∆∞·ª£c th√™m (tr√°nh l·∫∑p khi b·∫•m n√∫t nhanh)
        if (chatMessages.isEmpty() || !chatMessages.get(chatMessages.size()-1).isUser() || !chatMessages.get(chatMessages.size()-1).getMessage().equals(message)) {
            addMessageToList(message, true);
        }

        etMessage.setText(""); // Lu√¥n x√≥a √¥ nh·∫≠p li·ªáu sau khi g·ª≠i

        // Hi·ªÉn th·ªã tin nh·∫Øn "ƒêang suy nghƒ©..."
        ChatMessage thinkingMessage = new ChatMessage("ƒêang suy nghƒ©...", false);
        chatMessages.add(thinkingMessage);
        int thinkingIndex = chatMessages.size() - 1;
        chatAdapter.notifyItemInserted(thinkingIndex);
        recyclerViewChat.smoothScrollToPosition(thinkingIndex);

        String lowerCaseMessage = message.toLowerCase();

        // X·ª≠ l√Ω logic AI cho "my fridge" / "I'm hungry"
        if (lowerCaseMessage.equals("my fridge")|| lowerCaseMessage.equals("i'm hungry")) {
            databaseExecutor.execute(() -> { // L·∫•y d·ªØ li·ªáu t·ªß l·∫°nh tr√™n lu·ªìng n·ªÅn
                try {
                    FoodItemViewModel foodViewModel = new FoodItemViewModel();
                    String currentUserId = UserSessionManager.getInstance(ChatActivity.this).getCurrentUserId();
                    //String userId = "2"; // L·∫•y userId hi·ªán t·∫°i
                    List<FoodItem> foodItems = foodViewModel.getFoodItemsByUserId(currentUserId);

                    mainHandler.post(() -> { // Quay l·∫°i lu·ªìng ch√≠nh ƒë·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£
                        if (foodItems == null || foodItems.isEmpty()) {
                            removeThinkingMessage(thinkingIndex);
                            addMessageToList("T·ªß l·∫°nh tr·ªëng n√™n m√¨nh ch∆∞a g·ª£i √Ω ƒë∆∞·ª£c m√≥n n√†o.", false);
                            return;
                        }

                        StringBuilder ingredients = new StringBuilder();
                        for (FoodItem item : foodItems) {
                            if (item.getQuantity() > 0 && item.getFoodName() != null && !item.getFoodName().isEmpty()) {
                                ingredients.append(item.getFoodName())
                                        .append(" (").append(item.getQuantity()).append("), ");
                            }
                        }
                        String ing = ingredients.toString().replaceAll(",\\s*$", "");

                        if (ing.isEmpty()) {
                            removeThinkingMessage(thinkingIndex);
                            addMessageToList("Kh√¥ng c√≥ nguy√™n li·ªáu n√†o h·ª£p l·ªá trong t·ªß l·∫°nh ƒë·ªÉ g·ª£i √Ω.", false);
                            return;
                        }

                        // T·∫°o prompt v√† g·ªçi API Gemini
                        String aiPrompt =
                                "B·∫°n l√† m·ªôt ƒë·∫ßu b·∫øp chuy√™n nghi·ªáp. D·ª±a v√†o nguy√™n li·ªáu sau: " + ing + ". " +
                                        "H√£y g·ª£i √Ω ch√≠nh x√°c 4 m√≥n ƒÉn. " +
                                        "QUAN TR·ªåNG: V·ªõi m·ªói m√≥n, h√£y tr·∫£ l·ªùi theo ƒê√öNG ƒë·ªãnh d·∫°ng sau, KH√îNG th√™m b·∫•t k·ª≥ gi·∫£i th√≠ch n√†o kh√°c:\n" +
                                        "## [S·ªë th·ª© t·ª±]. [T√™n m√≥n ƒÉn]\n" +
                                        "@@nguyenlieu [Li·ªát k√™ nguy√™n li·ªáu c·∫ßn th√™m]\n" +
                                        "@@congthuc [Li·ªát k√™ c√°c b∆∞·ªõc c√¥ng th·ª©c]\n" +
                                        "@@dinhduong [Ghi th√¥ng tin dinh d∆∞·ª°ng ∆∞·ªõc t√≠nh, v√≠ d·ª•: Kho·∫£ng 450 calo, gi√†u protein]\n" +
                                        "@@thoigian [Ghi th·ªùi gian n·∫•u]\n" +
                                        "---";
                        callGeminiApi(aiPrompt, thinkingIndex);
                    });

                } catch (Exception e) {
                    mainHandler.post(() -> {
                        removeThinkingMessage(thinkingIndex);
                        addMessageToList("L·ªói khi l·∫•y d·ªØ li·ªáu t·ªß l·∫°nh: " + e.getMessage(), false);
                    });
                }
            });
        } else {
            // X·ª≠ l√Ω c√°c tin nh·∫Øn vƒÉn b·∫£n th√¥ng th∆∞·ªùng kh√°c
            callGeminiApi(message, thinkingIndex);
        }
    }

    /**
     * G·ªçi Gemini API v√† x·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ.
     * @param prompt C√¢u l·ªánh g·ª≠i cho AI.
     * @param thinkingIndex V·ªã tr√≠ c·ªßa tin nh·∫Øn "ƒêang suy nghƒ©..." ƒë·ªÉ x√≥a sau khi c√≥ k·∫øt qu·∫£.
     */
    private void callGeminiApi(String prompt, final int thinkingIndex) { // thinkingIndex n√™n l√† final
        new GeminiApi().sendMessage(prompt, new GeminiApi.Callback() {
            @Override
            public void onSuccess(String reply) {
                mainHandler.post(() -> {
                    removeThinkingMessage(thinkingIndex);
                    addMessageToList(reply, false);
                });
            }

            @Override
            public void onError(Exception e) {
                mainHandler.post(() -> {
                    removeThinkingMessage(thinkingIndex);
                    addMessageToList("L·ªói Gemini: " + e.getMessage(), false);
                });
            }
        });
    }

    /**
     * X√≥a tin nh·∫Øn "ƒêang suy nghƒ©..." kh·ªèi danh s√°ch v√† c·∫≠p nh·∫≠t RecyclerView.
     * @param index V·ªã tr√≠ c·ªßa tin nh·∫Øn c·∫ßn x√≥a.
     */
    private void removeThinkingMessage(int index) {
        // Ki·ªÉm tra index h·ª£p l·ªá v√† n·ªôi dung tin nh·∫Øn tr∆∞·ªõc khi x√≥a
        if (index >= 0 && index < chatMessages.size()) {
            ChatMessage msg = chatMessages.get(index);
            if (msg != null && !msg.isUser() && msg.getMessage().equals("ƒêang suy nghƒ©...")) {
                chatMessages.remove(index);
                chatAdapter.notifyItemRemoved(index);
                // Kh√¥ng c·∫ßn cu·ªôn l·∫°i ·ªü ƒë√¢y
            }
        }
    }

    /**
     * Thi·∫øt l·∫≠p observer ƒë·ªÉ theo d√µi tr·∫°ng th√°i l∆∞u recipe t·ª´ ViewModel.
     */
    private void observeViewModel() {
        recipeViewModel.saveStatus.observe(this, success -> {
            if (success == null) return;
            if (success) {
                Toast.makeText(this, "L∆∞u v√†o DB th√†nh c√¥ng!", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "L·ªói: Kh√¥ng th·ªÉ l∆∞u v√†o DB.", Toast.LENGTH_LONG).show();
            }
            recipeViewModel.resetSaveStatus();
        });
    }

    /**
     * Hi·ªÉn th·ªã tin nh·∫Øn ch√†o m·ª´ng ban ƒë·∫ßu.
     */
    private void greetUser() {
        String[] greetings = {
                "Xin ch√†o! M√¨nh l√† MealTime üçΩÔ∏è ‚Äì tr·ª£ l√Ω g·ª£i √Ω m√≥n ƒÉn c·ªßa b·∫°n h√¥m nay!",
                "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi MealTime ü§ñ! Mu·ªën m√¨nh g·ª£i √Ω b·ªØa ƒÉn ngon mi·ªáng ch·ª©?",
                "Hey! ƒê√¢y l√† MealTime üòã ‚Äì c√πng kh√°m ph√° m√≥n ƒÉn th√∫ v·ªã n√†o!",
                "Xin ch√†o, m√¨nh l√† MealTime AI. H√£y n√≥i m√¨nh bi·∫øt b·∫°n c√≥ g√¨ trong t·ªß l·∫°nh nh√©!"
        };
        String greeting = greetings[(int) (Math.random() * greetings.length)];
        addMessageToList(greeting, false); // S·ª≠ d·ª•ng h√†m ti·ªán √≠ch
    }

    /**
     * X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "L∆∞u m√≥n ƒÉn" tr√™n th·∫ª c√¥ng th·ª©c.
     * @param recipe D·ªØ li·ªáu c·ªßa m√≥n ƒÉn c·∫ßn l∆∞u.
     */
    @Override
    public void onSaveRecipeClicked(RecipeData recipe) {
        String currentUserId = UserSessionManager.getInstance(ChatActivity.this).getCurrentUserId();
        //String userId = "2"; // L·∫•y userId hi·ªán t·∫°i
        recipeViewModel.saveRecipeToDatabase(recipe, currentUserId);
        Toast.makeText(this, "ƒê√£ g·ª≠i y√™u c·∫ßu l∆∞u m√≥n: " + recipe.getTitle(), Toast.LENGTH_SHORT).show();
    }
}

